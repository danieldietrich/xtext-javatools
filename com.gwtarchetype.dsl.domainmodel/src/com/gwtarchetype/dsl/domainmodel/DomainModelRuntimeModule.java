/*
 * generated by Xtext
 */
package com.gwtarchetype.dsl.domainmodel;

import net.danieldietrich.protectedregions.core.RegionParserFactory;
import net.danieldietrich.protectedregions.support.ProtectedRegionSupport;
import net.danieldietrich.protectedregions.xtext.BidiJavaIoFileSystemAccess;
import net.danieldietrich.xtext.xbase.jvmmodel.InferredJvmTypeFactory;
import net.danieldietrich.xtext.xbase.jvmmodel.impl.InferredJvmTypeFactoryImpl;

import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.naming.IQualifiedNameProvider;

import com.google.inject.Provides;
import com.google.inject.Singleton;
import com.gwtarchetype.dsl.domainmodel.naming.JavaQualifiedNameProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension
 * registry.
 */
public class DomainModelRuntimeModule extends
    com.gwtarchetype.dsl.domainmodel.AbstractDomainModelRuntimeModule {

  @Override
  public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
    return JavaQualifiedNameProvider.class;
  }

  @Singleton
  public Class<? extends InferredJvmTypeFactory> bindInferredJvmTypeFactory() {
    return InferredJvmTypeFactoryImpl.class;
  }

  @Provides
  public JavaIoFileSystemAccess createJavaIoFileSystemAccess(ProtectedRegionSupport support) {
    support.addParser(RegionParserFactory.createJavaParser(), ".java");
    BidiJavaIoFileSystemAccess fsa = new BidiJavaIoFileSystemAccess(support);
    // fsa.setFilter(...); // (optional)
    return fsa;
  }
}
